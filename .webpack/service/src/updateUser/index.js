(()=>{"use strict";var e={906:function(e,t,o){var a=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,s){function i(e){try{d(a.next(e))}catch(e){s(e)}}function r(e){try{d(a.throw(e))}catch(e){s(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,r)}d((a=a.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getUser=t.updateUser=t.postUser=t.dynamoDb=void 0;const n=o(336),s=o(553);t.dynamoDb=new n.DynamoDB.DocumentClient({region:s.mainRegion}),t.postUser=e=>a(void 0,void 0,void 0,(function*(){const o=yield t.dynamoDb.put(e).promise();console.log("Post successful:",o)})),t.updateUser=e=>a(void 0,void 0,void 0,(function*(){yield t.dynamoDb.update(e).promise()})),t.getUser=e=>a(void 0,void 0,void 0,(function*(){const o=yield t.dynamoDb.get(e).promise();o.Item?console.log("Item was inserted:",o.Item):console.log("Item was not found")}))},464:function(e,t,o){var a=this&&this.__awaiter||function(e,t,o,a){return new(o||(o=Promise))((function(n,s){function i(e){try{d(a.next(e))}catch(e){s(e)}}function r(e){try{d(a.throw(e))}catch(e){s(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(i,r)}d((a=a.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.handler=void 0;const n=o(553),s=o(906);t.handler=e=>a(void 0,void 0,void 0,(function*(){try{const t=JSON.parse(e.body||"{}"),o={TableName:n.tableName,Key:{id:t.id},UpdateExpression:"set #firstName=:firstName, #lastName=:lastName, #email=:email, #password=:password",ExpressionAttributeNames:{"#firstName":"firstName","#lastName":"lastName","#email":"email","#password":"password"},ExpressionAttributeValues:{":firstName":t.firstName,":lastName":t.lastName,":email":t.email,":password":t.password},ReturnValues:"UPDATED_NEW"};return yield(0,s.updateUser)(o),{statusCode:200,body:JSON.stringify({message:"User data updated"})}}catch(e){return{statusCode:500,body:JSON.stringify({message:e.message})}}}))},553:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tableName=t.secondaryRegion=t.mainRegion=t.moveoLambdaRole=void 0,t.moveoLambdaRole="arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",t.mainRegion="il-central-1",t.secondaryRegion="eu-west-1",t.tableName="idoBar-users"},336:e=>{e.exports=require("aws-sdk")}},t={},o=function o(a){var n=t[a];if(void 0!==n)return n.exports;var s=t[a]={exports:{}};return e[a].call(s.exports,s,s.exports,o),s.exports}(464),a=exports;for(var n in o)a[n]=o[n];o.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZWJwYWNrOi8vYXdzLXNraWxscy8uL3NyYy9zZXJ2aWNlcy9keW5hbW9EQi50cyIsIndlYnBhY2s6Ly9hd3Mtc2tpbGxzLy4vc3JjL3VwZGF0ZVVzZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vYXdzLXNraWxscy8uL3NyYy91dGlscy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vYXdzLXNraWxscy9leHRlcm5hbCBjb21tb25qcyBcImF3cy1zZGtcIiIsIndlYnBhY2s6Ly9hd3Mtc2tpbGxzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2F3cy1za2lsbHMvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFVzZXIgPSBleHBvcnRzLnVwZGF0ZVVzZXIgPSBleHBvcnRzLnBvc3RVc2VyID0gZXhwb3J0cy5keW5hbW9EYiA9IHZvaWQgMDtcbmNvbnN0IGF3c19zZGtfMSA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvY29uc3RhbnRzXCIpO1xuZXhwb3J0cy5keW5hbW9EYiA9IG5ldyBhd3Nfc2RrXzEuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoe1xuICAgIHJlZ2lvbjogY29uc3RhbnRzXzEubWFpblJlZ2lvbixcbn0pO1xuY29uc3QgcG9zdFVzZXIgPSAocGFyYW1zKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zdCByZXN1bHQgPSB5aWVsZCBleHBvcnRzLmR5bmFtb0RiLnB1dChwYXJhbXMpLnByb21pc2UoKTtcbiAgICBjb25zb2xlLmxvZyhcIlBvc3Qgc3VjY2Vzc2Z1bDpcIiwgcmVzdWx0KTtcbn0pO1xuZXhwb3J0cy5wb3N0VXNlciA9IHBvc3RVc2VyO1xuY29uc3QgdXBkYXRlVXNlciA9IChwYXJhbXMpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIGV4cG9ydHMuZHluYW1vRGIudXBkYXRlKHBhcmFtcykucHJvbWlzZSgpO1xufSk7XG5leHBvcnRzLnVwZGF0ZVVzZXIgPSB1cGRhdGVVc2VyO1xuY29uc3QgZ2V0VXNlciA9IChwYXJhbXMpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZXhwb3J0cy5keW5hbW9EYi5nZXQocGFyYW1zKS5wcm9taXNlKCk7XG4gICAgaWYgKHJlc3BvbnNlLkl0ZW0pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJJdGVtIHdhcyBpbnNlcnRlZDpcIiwgcmVzcG9uc2UuSXRlbSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkl0ZW0gd2FzIG5vdCBmb3VuZFwiKTtcbiAgICB9XG59KTtcbmV4cG9ydHMuZ2V0VXNlciA9IGdldFVzZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYW5kbGVyID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvY29uc3RhbnRzXCIpO1xuY29uc3QgZHluYW1vREJfMSA9IHJlcXVpcmUoXCIuLi9zZXJ2aWNlcy9keW5hbW9EQlwiKTtcbmNvbnN0IGhhbmRsZXIgPSAoZXZlbnQpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkgfHwgXCJ7fVwiKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgVGFibGVOYW1lOiBjb25zdGFudHNfMS50YWJsZU5hbWUsXG4gICAgICAgICAgICBLZXk6IHtcbiAgICAgICAgICAgICAgICBpZDogYm9keS5pZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBVcGRhdGVFeHByZXNzaW9uOiBcInNldCAjZmlyc3ROYW1lPTpmaXJzdE5hbWUsICNsYXN0TmFtZT06bGFzdE5hbWUsICNlbWFpbD06ZW1haWwsICNwYXNzd29yZD06cGFzc3dvcmRcIixcbiAgICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge1xuICAgICAgICAgICAgICAgIFwiI2ZpcnN0TmFtZVwiOiBcImZpcnN0TmFtZVwiLFxuICAgICAgICAgICAgICAgIFwiI2xhc3ROYW1lXCI6IFwibGFzdE5hbWVcIixcbiAgICAgICAgICAgICAgICBcIiNlbWFpbFwiOiBcImVtYWlsXCIsXG4gICAgICAgICAgICAgICAgXCIjcGFzc3dvcmRcIjogXCJwYXNzd29yZFwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgICAgICAgICBcIjpmaXJzdE5hbWVcIjogYm9keS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgXCI6bGFzdE5hbWVcIjogYm9keS5sYXN0TmFtZSxcbiAgICAgICAgICAgICAgICBcIjplbWFpbFwiOiBib2R5LmVtYWlsLFxuICAgICAgICAgICAgICAgIFwiOnBhc3N3b3JkXCI6IGJvZHkucGFzc3dvcmQsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmV0dXJuVmFsdWVzOiBcIlVQREFURURfTkVXXCIsXG4gICAgICAgIH07XG4gICAgICAgIHlpZWxkICgwLCBkeW5hbW9EQl8xLnVwZGF0ZVVzZXIpKHBhcmFtcyk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiVXNlciBkYXRhIHVwZGF0ZWRcIiB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSksXG4gICAgICAgIH07XG4gICAgfVxufSk7XG5leHBvcnRzLmhhbmRsZXIgPSBoYW5kbGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRhYmxlTmFtZSA9IGV4cG9ydHMuc2Vjb25kYXJ5UmVnaW9uID0gZXhwb3J0cy5tYWluUmVnaW9uID0gZXhwb3J0cy5tb3Zlb0xhbWJkYVJvbGUgPSB2b2lkIDA7XG5leHBvcnRzLm1vdmVvTGFtYmRhUm9sZSA9IFwiYXJuOmF3czppYW06Ojc3OTAwMDA2NzEzMDpyb2xlL01vdmVvLUxhbWJkYUV4ZWN1dGlvblJvbGVcIjtcbmV4cG9ydHMubWFpblJlZ2lvbiA9ICdpbC1jZW50cmFsLTEnO1xuZXhwb3J0cy5zZWNvbmRhcnlSZWdpb24gPSAnZXUtd2VzdC0xJztcbmV4cG9ydHMudGFibGVOYW1lID0gJ2lkb0Jhci11c2Vycyc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDY0KTtcbiJdLCJuYW1lcyI6WyJfX2F3YWl0ZXIiLCJ0aGlzIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsImdldFVzZXIiLCJ1cGRhdGVVc2VyIiwicG9zdFVzZXIiLCJkeW5hbW9EYiIsImF3c19zZGtfMSIsImNvbnN0YW50c18xIiwiRHluYW1vREIiLCJEb2N1bWVudENsaWVudCIsInJlZ2lvbiIsIm1haW5SZWdpb24iLCJwYXJhbXMiLCJwdXQiLCJwcm9taXNlIiwiY29uc29sZSIsImxvZyIsInVwZGF0ZSIsInJlc3BvbnNlIiwiZ2V0IiwiSXRlbSIsImhhbmRsZXIiLCJkeW5hbW9EQl8xIiwiZXZlbnQiLCJib2R5IiwiSlNPTiIsInBhcnNlIiwiVGFibGVOYW1lIiwidGFibGVOYW1lIiwiS2V5IiwiaWQiLCJVcGRhdGVFeHByZXNzaW9uIiwiRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzIiwiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcyIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsIlJldHVyblZhbHVlcyIsInN0YXR1c0NvZGUiLCJzdHJpbmdpZnkiLCJtZXNzYWdlIiwiZXJyb3IiLCJzZWNvbmRhcnlSZWdpb24iLCJtb3Zlb0xhbWJkYVJvbGUiLCJtb2R1bGUiLCJyZXF1aXJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==