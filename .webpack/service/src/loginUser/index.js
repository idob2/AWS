(()=>{"use strict";var e={355:function(e,n,o){var i=this&&this.__awaiter||function(e,n,o,i){return new(o||(o=Promise))((function(t,r){function s(e){try{c(i.next(e))}catch(e){r(e)}}function a(e){try{c(i.throw(e))}catch(e){r(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(s,a)}c((i=i.apply(e,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.handler=void 0;const t=o(706);n.handler=e=>i(void 0,void 0,void 0,(function*(){var n;const o=JSON.parse(e.body||"{}"),{email:i,password:r}=o;try{const e={AuthFlow:"USER_PASSWORD_AUTH",ClientId:process.env.APP_CLIENT_ID,AuthParameters:{USERNAME:i,PASSWORD:r}},o=yield(0,t.loginUser)(e);return{statusCode:200,body:JSON.stringify({message:"Login successful!",accessToken:null===(n=o.AuthenticationResult)||void 0===n?void 0:n.AccessToken})}}catch(e){return console.error(e),{statusCode:400,body:JSON.stringify({message:e.message})}}}))},706:function(e,n,o){var i=this&&this.__awaiter||function(e,n,o,i){return new(o||(o=Promise))((function(t,r){function s(e){try{c(i.next(e))}catch(e){r(e)}}function a(e){try{c(i.throw(e))}catch(e){r(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(s,a)}c((i=i.apply(e,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.signUpUser=n.confirmUser=n.loginUser=void 0;const t=o(336),r=o(553),s=new t.CognitoIdentityServiceProvider({region:r.secondaryRegion});n.loginUser=e=>i(void 0,void 0,void 0,(function*(){return yield s.initiateAuth(e).promise()})),n.confirmUser=e=>i(void 0,void 0,void 0,(function*(){return yield s.adminConfirmSignUp(e).promise()})),n.signUpUser=e=>i(void 0,void 0,void 0,(function*(){return yield s.signUp(e).promise()}))},553:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.tableName=n.secondaryRegion=n.mainRegion=n.moveoLambdaRole=void 0,n.moveoLambdaRole="arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",n.mainRegion="il-central-1",n.secondaryRegion="eu-west-1",n.tableName="idoBar-users"},336:e=>{e.exports=require("aws-sdk")}},n={},o=function o(i){var t=n[i];if(void 0!==t)return t.exports;var r=n[i]={exports:{}};return e[i].call(r.exports,r,r.exports,o),r.exports}(355),i=exports;for(var t in o)i[t]=o[t];o.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,