(()=>{"use strict";var e={355:function(e,o,n){var i=this&&this.__awaiter||function(e,o,n,i){return new(n||(n=Promise))((function(t,r){function s(e){try{d(i.next(e))}catch(e){r(e)}}function a(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){var o;e.done?t(e.value):(o=e.value,o instanceof n?o:new n((function(e){e(o)}))).then(s,a)}d((i=i.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.handler=void 0;const t=n(706);o.handler=e=>i(void 0,void 0,void 0,(function*(){var o;const n=JSON.parse(e.body||"{}"),{email:i,password:r}=n;try{const e={AuthFlow:"USER_PASSWORD_AUTH",ClientId:process.env.APP_CLIENT_ID,AuthParameters:{USERNAME:i,PASSWORD:r}},n=yield(0,t.loginUser)(e);return{statusCode:200,body:JSON.stringify({message:"Login successful!",idToken:null===(o=n.AuthenticationResult)||void 0===o?void 0:o.IdToken})}}catch(e){return console.error(e),{statusCode:400,body:JSON.stringify({message:e.message})}}}))},706:function(e,o,n){var i=this&&this.__awaiter||function(e,o,n,i){return new(n||(n=Promise))((function(t,r){function s(e){try{d(i.next(e))}catch(e){r(e)}}function a(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){var o;e.done?t(e.value):(o=e.value,o instanceof n?o:new n((function(e){e(o)}))).then(s,a)}d((i=i.apply(e,o||[])).next())}))};Object.defineProperty(o,"__esModule",{value:!0}),o.signUpUser=o.confirmUser=o.loginUser=void 0;const t=n(336),r=n(553),s=new t.CognitoIdentityServiceProvider({region:r.secondaryRegion});o.loginUser=e=>i(void 0,void 0,void 0,(function*(){return yield s.initiateAuth(e).promise()})),o.confirmUser=e=>i(void 0,void 0,void 0,(function*(){yield s.adminConfirmSignUp(e).promise()})),o.signUpUser=e=>i(void 0,void 0,void 0,(function*(){yield s.signUp(e).promise()}))},553:(e,o)=>{Object.defineProperty(o,"__esModule",{value:!0}),o.tableName=o.secondaryRegion=o.mainRegion=o.moveoLambdaRole=void 0,o.moveoLambdaRole="arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",o.mainRegion="il-central-1",o.secondaryRegion="eu-west-1",o.tableName="idoBar-users"},336:e=>{e.exports=require("aws-sdk")}},o={},n=function n(i){var t=o[i];if(void 0!==t)return t.exports;var r=o[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}(355),i=exports;for(var t in n)i[t]=n[t];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SSxrQkFNeEJyQyxFQUFRcUIsVUFKV1YsR0FBV2hDLE9BQVUsT0FBUSxPQUFRLEdBQVEsWUFFNUQsYUFENEJ1RCxFQUFRSSxhQUFhM0IsR0FBUTRCLFNBRTdELElBS0F2QyxFQUFRK0IsWUFIYXBCLEdBQVdoQyxPQUFVLE9BQVEsT0FBUSxHQUFRLGtCQUN4RHVELEVBQVFNLG1CQUFtQjdCLEdBQVE0QixTQUM3QyxJQUtBdkMsRUFBUThCLFdBSFluQixHQUFXaEMsT0FBVSxPQUFRLE9BQVEsR0FBUSxrQkFDdkR1RCxFQUFRTyxPQUFPOUIsR0FBUTRCLFNBQ2pDLEcsY0MzQkF6QyxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRVgsT0FBTyxJQUN0RFcsRUFBUTBDLFVBQVkxQyxFQUFRcUMsZ0JBQWtCckMsRUFBUTJDLFdBQWEzQyxFQUFRNEMscUJBQWtCLEVBQzdGNUMsRUFBUTRDLGdCQUFrQiwyREFDMUI1QyxFQUFRMkMsV0FBYSxlQUNyQjNDLEVBQVFxQyxnQkFBa0IsWUFDMUJyQyxFQUFRMEMsVUFBWSxjLFVDTnBCRyxFQUFPN0MsUUFBVThDLFFBQVEsVSxHQ0NyQkMsRUFBMkIsQ0FBQyxFQ0U1QkMsRURDSixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUosRUFBeUJHLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhbkQsUUFHckIsSUFBSTZDLEVBQVNFLEVBQXlCRyxHQUFZLENBR2pEbEQsUUFBUyxDQUFDLEdBT1gsT0FIQXFELEVBQW9CSCxHQUFVSSxLQUFLVCxFQUFPN0MsUUFBUzZDLEVBQVFBLEVBQU83QyxRQUFTaUQsR0FHcEVKLEVBQU83QyxPQUNmLENDbkIwQmlELENBQW9CLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd3Mtc2tpbGxzLy4vc3JjL2xvZ2luVXNlci9pbmRleC50cyIsIndlYnBhY2s6Ly9hd3Mtc2tpbGxzLy4vc3JjL3NlcnZpY2VzL2NvZ25pdG8udHMiLCJ3ZWJwYWNrOi8vYXdzLXNraWxscy8uL3NyYy91dGlscy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vYXdzLXNraWxscy9leHRlcm5hbCBjb21tb25qcyBcImF3cy1zZGtcIiIsIndlYnBhY2s6Ly9hd3Mtc2tpbGxzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2F3cy1za2lsbHMvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhhbmRsZXIgPSB2b2lkIDA7XG5jb25zdCBjb2duaXRvXzEgPSByZXF1aXJlKFwiLi4vc2VydmljZXMvY29nbml0b1wiKTtcbmNvbnN0IGhhbmRsZXIgPSAoZXZlbnQpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShldmVudC5ib2R5IHx8IFwie31cIik7XG4gICAgY29uc3QgeyBlbWFpbCwgcGFzc3dvcmQgfSA9IGRhdGE7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgQXV0aEZsb3c6IFwiVVNFUl9QQVNTV09SRF9BVVRIXCIsXG4gICAgICAgICAgICBDbGllbnRJZDogcHJvY2Vzcy5lbnYuQVBQX0NMSUVOVF9JRCxcbiAgICAgICAgICAgIEF1dGhQYXJhbWV0ZXJzOiB7XG4gICAgICAgICAgICAgICAgVVNFUk5BTUU6IGVtYWlsLFxuICAgICAgICAgICAgICAgIFBBU1NXT1JEOiBwYXNzd29yZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGxvZ2luUmVzcG9uc2UgPSB5aWVsZCAoMCwgY29nbml0b18xLmxvZ2luVXNlcikocGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkxvZ2luIHN1Y2Nlc3NmdWwhXCIsXG4gICAgICAgICAgICAgICAgaWRUb2tlbjogKF9hID0gbG9naW5SZXNwb25zZS5BdXRoZW50aWNhdGlvblJlc3VsdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLklkVG9rZW4sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pLFxuICAgICAgICB9O1xuICAgIH1cbn0pO1xuZXhwb3J0cy5oYW5kbGVyID0gaGFuZGxlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNpZ25VcFVzZXIgPSBleHBvcnRzLmNvbmZpcm1Vc2VyID0gZXhwb3J0cy5sb2dpblVzZXIgPSB2b2lkIDA7XG5jb25zdCBhd3Nfc2RrXzEgPSByZXF1aXJlKFwiYXdzLXNka1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2NvbnN0YW50c1wiKTtcbmNvbnN0IGNvZ25pdG8gPSBuZXcgYXdzX3Nka18xLkNvZ25pdG9JZGVudGl0eVNlcnZpY2VQcm92aWRlcih7XG4gICAgcmVnaW9uOiBjb25zdGFudHNfMS5zZWNvbmRhcnlSZWdpb24sXG59KTtcbmNvbnN0IGxvZ2luVXNlciA9IChwYXJhbXMpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIGNvbnN0IGxvZ2luUmVzcG9uc2UgPSB5aWVsZCBjb2duaXRvLmluaXRpYXRlQXV0aChwYXJhbXMpLnByb21pc2UoKTtcbiAgICByZXR1cm4gbG9naW5SZXNwb25zZTtcbn0pO1xuZXhwb3J0cy5sb2dpblVzZXIgPSBsb2dpblVzZXI7XG5jb25zdCBjb25maXJtVXNlciA9IChwYXJhbXMpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHlpZWxkIGNvZ25pdG8uYWRtaW5Db25maXJtU2lnblVwKHBhcmFtcykucHJvbWlzZSgpO1xufSk7XG5leHBvcnRzLmNvbmZpcm1Vc2VyID0gY29uZmlybVVzZXI7XG5jb25zdCBzaWduVXBVc2VyID0gKHBhcmFtcykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgeWllbGQgY29nbml0by5zaWduVXAocGFyYW1zKS5wcm9taXNlKCk7XG59KTtcbmV4cG9ydHMuc2lnblVwVXNlciA9IHNpZ25VcFVzZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGFibGVOYW1lID0gZXhwb3J0cy5zZWNvbmRhcnlSZWdpb24gPSBleHBvcnRzLm1haW5SZWdpb24gPSBleHBvcnRzLm1vdmVvTGFtYmRhUm9sZSA9IHZvaWQgMDtcbmV4cG9ydHMubW92ZW9MYW1iZGFSb2xlID0gXCJhcm46YXdzOmlhbTo6Nzc5MDAwMDY3MTMwOnJvbGUvTW92ZW8tTGFtYmRhRXhlY3V0aW9uUm9sZVwiO1xuZXhwb3J0cy5tYWluUmVnaW9uID0gJ2lsLWNlbnRyYWwtMSc7XG5leHBvcnRzLnNlY29uZGFyeVJlZ2lvbiA9ICdldS13ZXN0LTEnO1xuZXhwb3J0cy50YWJsZU5hbWUgPSAnaWRvQmFyLXVzZXJzJztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImF3cy1zZGtcIik7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTUpO1xuIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXMiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiaGFuZGxlciIsImNvZ25pdG9fMSIsImV2ZW50IiwiX2EiLCJkYXRhIiwiSlNPTiIsInBhcnNlIiwiYm9keSIsImVtYWlsIiwicGFzc3dvcmQiLCJwYXJhbXMiLCJBdXRoRmxvdyIsIkNsaWVudElkIiwicHJvY2VzcyIsImVudiIsIkFQUF9DTElFTlRfSUQiLCJBdXRoUGFyYW1ldGVycyIsIlVTRVJOQU1FIiwiUEFTU1dPUkQiLCJsb2dpblJlc3BvbnNlIiwibG9naW5Vc2VyIiwic3RhdHVzQ29kZSIsInN0cmluZ2lmeSIsIm1lc3NhZ2UiLCJpZFRva2VuIiwiQXV0aGVudGljYXRpb25SZXN1bHQiLCJJZFRva2VuIiwiZXJyb3IiLCJjb25zb2xlIiwic2lnblVwVXNlciIsImNvbmZpcm1Vc2VyIiwiYXdzX3Nka18xIiwiY29uc3RhbnRzXzEiLCJjb2duaXRvIiwiQ29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyIiwicmVnaW9uIiwic2Vjb25kYXJ5UmVnaW9uIiwiaW5pdGlhdGVBdXRoIiwicHJvbWlzZSIsImFkbWluQ29uZmlybVNpZ25VcCIsInNpZ25VcCIsInRhYmxlTmFtZSIsIm1haW5SZWdpb24iLCJtb3Zlb0xhbWJkYVJvbGUiLCJtb2R1bGUiLCJyZXF1aXJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==