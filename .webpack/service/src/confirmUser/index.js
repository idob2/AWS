(()=>{"use strict";var e={954:function(e,n,o){var r=this&&this.__awaiter||function(e,n,o,r){return new(o||(o=Promise))((function(i,t){function s(e){try{c(r.next(e))}catch(e){t(e)}}function a(e){try{c(r.throw(e))}catch(e){t(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(s,a)}c((r=r.apply(e,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.handler=void 0;const i=o(706);n.handler=e=>r(void 0,void 0,void 0,(function*(){try{const n=JSON.parse(e.body),{email:o}=n,r={UserPoolId:process.env.USER_POOL_ID,Username:o};return yield(0,i.confirmUser)(r),{statusCode:200,body:JSON.stringify({message:"User confirmed successfully"})}}catch(e){return console.error("Error confirming user:",e),{statusCode:400,body:JSON.stringify({message:e.message})}}}))},706:function(e,n,o){var r=this&&this.__awaiter||function(e,n,o,r){return new(o||(o=Promise))((function(i,t){function s(e){try{c(r.next(e))}catch(e){t(e)}}function a(e){try{c(r.throw(e))}catch(e){t(e)}}function c(e){var n;e.done?i(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(s,a)}c((r=r.apply(e,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0}),n.signUpUser=n.confirmUser=n.loginUser=void 0;const i=o(336),t=o(553),s=new i.CognitoIdentityServiceProvider({region:t.secondaryRegion});n.loginUser=e=>r(void 0,void 0,void 0,(function*(){return yield s.initiateAuth(e).promise()})),n.confirmUser=e=>r(void 0,void 0,void 0,(function*(){return yield s.adminConfirmSignUp(e).promise()})),n.signUpUser=e=>r(void 0,void 0,void 0,(function*(){return yield s.signUp(e).promise()}))},553:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.tableName=n.secondaryRegion=n.mainRegion=n.moveoLambdaRole=void 0,n.moveoLambdaRole="arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",n.mainRegion="il-central-1",n.secondaryRegion="eu-west-1",n.tableName="idoBar-users"},336:e=>{e.exports=require("aws-sdk")}},n={},o=function o(r){var i=n[r];if(void 0!==i)return i.exports;var t=n[r]={exports:{}};return e[r].call(t.exports,t,t.exports,o),t.exports}(954),r=exports;for(var i in o)r[i]=o[i];o.__esModule&&Object.defineProperty(r,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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OUQsYUFBYTZDLEVBQVFNLG1CQUFtQnRCLEdBQVFxQixTQUNwRCxJQUtBN0IsRUFBUW9CLFdBSFlaLEdBQVc3QixPQUFVLE9BQVEsT0FBUSxHQUFRLFlBQzdELGFBQWE2QyxFQUFRTyxPQUFPdkIsR0FBUXFCLFNBQ3hDLEcsY0MxQkEvQixPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRVgsT0FBTyxJQUN0RFcsRUFBUWdDLFVBQVloQyxFQUFRMkIsZ0JBQWtCM0IsRUFBUWlDLFdBQWFqQyxFQUFRa0MscUJBQWtCLEVBQzdGbEMsRUFBUWtDLGdCQUFrQiwyREFDMUJsQyxFQUFRaUMsV0FBYSxlQUNyQmpDLEVBQVEyQixnQkFBa0IsWUFDMUIzQixFQUFRZ0MsVUFBWSxjLFVDTnBCRyxFQUFPbkMsUUFBVW9DLFFBQVEsVSxHQ0NyQkMsRUFBMkIsQ0FBQyxFQ0U1QkMsRURDSixTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUosRUFBeUJHLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhekMsUUFHckIsSUFBSW1DLEVBQVNFLEVBQXlCRyxHQUFZLENBR2pEeEMsUUFBUyxDQUFDLEdBT1gsT0FIQTJDLEVBQW9CSCxHQUFVSSxLQUFLVCxFQUFPbkMsUUFBU21DLEVBQVFBLEVBQU9uQyxRQUFTdUMsR0FHcEVKLEVBQU9uQyxPQUNmLENDbkIwQnVDLENBQW9CLEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hd3Mtc2tpbGxzLy4vc3JjL2NvbmZpcm1Vc2VyL2luZGV4LnRzIiwid2VicGFjazovL2F3cy1za2lsbHMvLi9zcmMvc2VydmljZXMvY29nbml0by50cyIsIndlYnBhY2s6Ly9hd3Mtc2tpbGxzLy4vc3JjL3V0aWxzL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9hd3Mtc2tpbGxzL2V4dGVybmFsIGNvbW1vbmpzIFwiYXdzLXNka1wiIiwid2VicGFjazovL2F3cy1za2lsbHMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYXdzLXNraWxscy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFuZGxlciA9IHZvaWQgMDtcbmNvbnN0IGNvZ25pdG9fMSA9IHJlcXVpcmUoXCIuLi9zZXJ2aWNlcy9jb2duaXRvXCIpO1xuY29uc3QgaGFuZGxlciA9IChldmVudCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYm9keSA9IEpTT04ucGFyc2UoZXZlbnQuYm9keSk7XG4gICAgICAgIGNvbnN0IHsgZW1haWwgfSA9IGJvZHk7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIFVzZXJQb29sSWQ6IHByb2Nlc3MuZW52LlVTRVJfUE9PTF9JRCxcbiAgICAgICAgICAgIFVzZXJuYW1lOiBlbWFpbCxcbiAgICAgICAgfTtcbiAgICAgICAgeWllbGQgKDAsIGNvZ25pdG9fMS5jb25maXJtVXNlcikocGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogXCJVc2VyIGNvbmZpcm1lZCBzdWNjZXNzZnVsbHlcIiB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjb25maXJtaW5nIHVzZXI6XCIsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KSxcbiAgICAgICAgfTtcbiAgICB9XG59KTtcbmV4cG9ydHMuaGFuZGxlciA9IGhhbmRsZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zaWduVXBVc2VyID0gZXhwb3J0cy5jb25maXJtVXNlciA9IGV4cG9ydHMubG9naW5Vc2VyID0gdm9pZCAwO1xuY29uc3QgYXdzX3Nka18xID0gcmVxdWlyZShcImF3cy1zZGtcIik7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9jb25zdGFudHNcIik7XG5jb25zdCBjb2duaXRvID0gbmV3IGF3c19zZGtfMS5Db2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIoe1xuICAgIHJlZ2lvbjogY29uc3RhbnRzXzEuc2Vjb25kYXJ5UmVnaW9uLFxufSk7XG5jb25zdCBsb2dpblVzZXIgPSAocGFyYW1zKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICByZXR1cm4geWllbGQgY29nbml0by5pbml0aWF0ZUF1dGgocGFyYW1zKS5wcm9taXNlKCk7XG59KTtcbmV4cG9ydHMubG9naW5Vc2VyID0gbG9naW5Vc2VyO1xuY29uc3QgY29uZmlybVVzZXIgPSAocGFyYW1zKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICByZXR1cm4geWllbGQgY29nbml0by5hZG1pbkNvbmZpcm1TaWduVXAocGFyYW1zKS5wcm9taXNlKCk7XG59KTtcbmV4cG9ydHMuY29uZmlybVVzZXIgPSBjb25maXJtVXNlcjtcbmNvbnN0IHNpZ25VcFVzZXIgPSAocGFyYW1zKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICByZXR1cm4geWllbGQgY29nbml0by5zaWduVXAocGFyYW1zKS5wcm9taXNlKCk7XG59KTtcbmV4cG9ydHMuc2lnblVwVXNlciA9IHNpZ25VcFVzZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGFibGVOYW1lID0gZXhwb3J0cy5zZWNvbmRhcnlSZWdpb24gPSBleHBvcnRzLm1haW5SZWdpb24gPSBleHBvcnRzLm1vdmVvTGFtYmRhUm9sZSA9IHZvaWQgMDtcbmV4cG9ydHMubW92ZW9MYW1iZGFSb2xlID0gXCJhcm46YXdzOmlhbTo6Nzc5MDAwMDY3MTMwOnJvbGUvTW92ZW8tTGFtYmRhRXhlY3V0aW9uUm9sZVwiO1xuZXhwb3J0cy5tYWluUmVnaW9uID0gJ2lsLWNlbnRyYWwtMSc7XG5leHBvcnRzLnNlY29uZGFyeVJlZ2lvbiA9ICdldS13ZXN0LTEnO1xuZXhwb3J0cy50YWJsZU5hbWUgPSAnaWRvQmFyLXVzZXJzJztcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImF3cy1zZGtcIik7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTQpO1xuIl0sIm5hbWVzIjpbIl9fYXdhaXRlciIsInRoaXMiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiaGFuZGxlciIsImNvZ25pdG9fMSIsImV2ZW50IiwiYm9keSIsIkpTT04iLCJwYXJzZSIsImVtYWlsIiwicGFyYW1zIiwiVXNlclBvb2xJZCIsInByb2Nlc3MiLCJlbnYiLCJVU0VSX1BPT0xfSUQiLCJVc2VybmFtZSIsImNvbmZpcm1Vc2VyIiwic3RhdHVzQ29kZSIsInN0cmluZ2lmeSIsIm1lc3NhZ2UiLCJlcnJvciIsImNvbnNvbGUiLCJzaWduVXBVc2VyIiwibG9naW5Vc2VyIiwiYXdzX3Nka18xIiwiY29uc3RhbnRzXzEiLCJjb2duaXRvIiwiQ29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyIiwicmVnaW9uIiwic2Vjb25kYXJ5UmVnaW9uIiwiaW5pdGlhdGVBdXRoIiwicHJvbWlzZSIsImFkbWluQ29uZmlybVNpZ25VcCIsInNpZ25VcCIsInRhYmxlTmFtZSIsIm1haW5SZWdpb24iLCJtb3Zlb0xhbWJkYVJvbGUiLCJtb2R1bGUiLCJyZXF1aXJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==