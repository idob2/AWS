(()=>{"use strict";var e={460:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{d(i.next(e))}catch(e){r(e)}}function s(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.handler=void 0;const o=n(553),r=n(906),a=n(706),s=n(997);t.handler=e=>i(void 0,void 0,void 0,(function*(){try{const t=JSON.parse(e.body||"{}");if(!s.validator.validate(t))return{statusCode:400,body:JSON.stringify({message:"Invalid data"})};const n={TableName:o.tableName,Item:{id:t.id,firstName:t.firstName,lastName:t.lastName,birthDate:t.birthDate,phone_number:t.phoneNumber}};yield(0,r.postUser)(n);const i={TableName:n.TableName,Key:{id:n.Item.id}},d=yield(0,r.getUser)(i);d.Item?console.log("Item was inserted:",d.Item):console.log("Item was not found");const l={ClientId:process.env.APP_CLIENT_ID,Username:t.email,Password:t.password,UserAttributes:[{Name:"email",Value:t.email},{Name:"given_name",Value:t.firstName},{Name:"family_name",Value:t.lastName},{Name:"birthdate",Value:t.birthDate},{Name:"phone_number",Value:t.phoneNumber}]};return yield(0,a.signUpUser)(l),{statusCode:201,body:JSON.stringify({id:t.id})}}catch(e){return console.error(e),{statusCode:400,body:JSON.stringify({message:e.message})}}}))},706:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{d(i.next(e))}catch(e){r(e)}}function s(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.signUpUser=t.confirmUser=t.loginUser=void 0;const o=n(336),r=n(553),a=new o.CognitoIdentityServiceProvider({region:r.secondaryRegion});t.loginUser=e=>i(void 0,void 0,void 0,(function*(){return yield a.initiateAuth(e).promise()})),t.confirmUser=e=>i(void 0,void 0,void 0,(function*(){return yield a.adminConfirmSignUp(e).promise()})),t.signUpUser=e=>i(void 0,void 0,void 0,(function*(){return yield a.signUp(e).promise()}))},906:function(e,t,n){var i=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(o,r){function a(e){try{d(i.next(e))}catch(e){r(e)}}function s(e){try{d(i.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((i=i.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getUser=t.updateUser=t.postUser=t.dynamoDb=void 0;const o=n(336),r=n(553);t.dynamoDb=new o.DynamoDB.DocumentClient({region:r.mainRegion}),t.postUser=e=>i(void 0,void 0,void 0,(function*(){return yield t.dynamoDb.put(e).promise()})),t.updateUser=e=>i(void 0,void 0,void 0,(function*(){return yield t.dynamoDb.update(e).promise()})),t.getUser=e=>i(void 0,void 0,void 0,(function*(){return yield t.dynamoDb.get(e).promise()}))},997:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validator=void 0,t.validator={validate(e){return e?!e.firstName||"string"!=typeof e.firstName||e.firstName.length>20?{valid:!1,error:"Invalid first name."}:!e.lastName||"string"!=typeof e.lastName||e.lastName.length>20?{valid:!1,error:"Invalid last name."}:e.id&&function(e){if("string"!=typeof e)return!1;const t=e.trim();if(!t)return!1;if(!/^\d{9}$/.test(t))return!1;let n=0;for(let e=0;e<9;e++){let i=parseInt(t[e])*(e%2+1);i>9&&(i-=9),n+=i}return n%10==0}(e.id)?e.phone&&(t=e.phone,/^\+9725\d{8}$/.test(t))?!e.password||"string"!=typeof e.password||e.password.length<6?{valid:!1,error:"Password must be a minimum of 6 characters."}:{valid:!0}:{valid:!1,error:"Invalid phone number. It should be in the format +9725XXXXXXXX."}:{valid:!1,error:"Invalid Israeli ID."}:{valid:!1,error:"Data is empty."};var t}}},553:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tableName=t.secondaryRegion=t.mainRegion=t.moveoLambdaRole=void 0,t.moveoLambdaRole="arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",t.mainRegion="il-central-1",t.secondaryRegion="eu-west-1",t.tableName="idoBar-users"},336:e=>{e.exports=require("aws-sdk")}},t={},n=function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}(460),i=exports;for(var o in n)i[o]=n[o];n.__esModule&&Object.defineProperty(i,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QjhCLENBcUNsQixFLGNDeERKOUUsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVYLE9BQU8sSUFDdERXLEVBQVFrQixVQUFZbEIsRUFBUXFELGdCQUFrQnJELEVBQVE4RCxXQUFhOUQsRUFBUTZFLHFCQUFrQixFQUM3RjdFLEVBQVE2RSxnQkFBa0IsMkRBQzFCN0UsRUFBUThELFdBQWEsZUFDckI5RCxFQUFRcUQsZ0JBQWtCLFlBQzFCckQsRUFBUWtCLFVBQVksYyxVQ05wQjRELEVBQU85RSxRQUFVK0UsUUFBUSxVLEdDQ3JCQyxFQUEyQixDQUFDLEVDRTVCQyxFRENKLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSixFQUF5QkcsR0FDNUMsUUFBcUJFLElBQWpCRCxFQUNILE9BQU9BLEVBQWFwRixRQUdyQixJQUFJOEUsRUFBU0UsRUFBeUJHLEdBQVksQ0FHakRuRixRQUFTLENBQUMsR0FPWCxPQUhBc0YsRUFBb0JILEdBQVVJLEtBQUtULEVBQU85RSxRQUFTOEUsRUFBUUEsRUFBTzlFLFFBQVNrRixHQUdwRUosRUFBTzlFLE9BQ2YsQ0NuQjBCa0YsQ0FBb0IsSyIsInNvdXJjZXMiOlsid2VicGFjazovL2F3cy1za2lsbHMvLi9zcmMvcG9zdFVzZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vYXdzLXNraWxscy8uL3NyYy9zZXJ2aWNlcy9jb2duaXRvLnRzIiwid2VicGFjazovL2F3cy1za2lsbHMvLi9zcmMvc2VydmljZXMvZHluYW1vREIudHMiLCJ3ZWJwYWNrOi8vYXdzLXNraWxscy8uL3NyYy9zZXJ2aWNlcy92YWxpZGF0b3IudHMiLCJ3ZWJwYWNrOi8vYXdzLXNraWxscy8uL3NyYy91dGlscy9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vYXdzLXNraWxscy9leHRlcm5hbCBjb21tb25qcyBcImF3cy1zZGtcIiIsIndlYnBhY2s6Ly9hd3Mtc2tpbGxzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2F3cy1za2lsbHMvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmhhbmRsZXIgPSB2b2lkIDA7XG5jb25zdCBjb25zdGFudHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9jb25zdGFudHNcIik7XG5jb25zdCBkeW5hbW9EQl8xID0gcmVxdWlyZShcIi4uL3NlcnZpY2VzL2R5bmFtb0RCXCIpO1xuY29uc3QgY29nbml0b18xID0gcmVxdWlyZShcIi4uL3NlcnZpY2VzL2NvZ25pdG9cIik7XG5jb25zdCB2YWxpZGF0b3JfMSA9IHJlcXVpcmUoXCIuLi9zZXJ2aWNlcy92YWxpZGF0b3JcIik7XG5jb25zdCBoYW5kbGVyID0gKGV2ZW50KSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShldmVudC5ib2R5IHx8IFwie31cIik7XG4gICAgICAgIGlmICghdmFsaWRhdG9yXzEudmFsaWRhdG9yLnZhbGlkYXRlKGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiSW52YWxpZCBkYXRhXCIgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIFRhYmxlTmFtZTogY29uc3RhbnRzXzEudGFibGVOYW1lLFxuICAgICAgICAgICAgSXRlbToge1xuICAgICAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgICAgICAgIGZpcnN0TmFtZTogZGF0YS5maXJzdE5hbWUsXG4gICAgICAgICAgICAgICAgbGFzdE5hbWU6IGRhdGEubGFzdE5hbWUsXG4gICAgICAgICAgICAgICAgYmlydGhEYXRlOiBkYXRhLmJpcnRoRGF0ZSxcbiAgICAgICAgICAgICAgICBwaG9uZV9udW1iZXI6IGRhdGEucGhvbmVOdW1iZXIsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICB5aWVsZCAoMCwgZHluYW1vREJfMS5wb3N0VXNlcikocGFyYW1zKTtcbiAgICAgICAgY29uc3QgZ2V0UGFyYW1zID0ge1xuICAgICAgICAgICAgVGFibGVOYW1lOiBwYXJhbXMuVGFibGVOYW1lLFxuICAgICAgICAgICAgS2V5OiB7XG4gICAgICAgICAgICAgICAgaWQ6IHBhcmFtcy5JdGVtLmlkLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdXNlclJlc3BvbnNlID0geWllbGQgKDAsIGR5bmFtb0RCXzEuZ2V0VXNlcikoZ2V0UGFyYW1zKTtcbiAgICAgICAgaWYgKHVzZXJSZXNwb25zZS5JdGVtKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkl0ZW0gd2FzIGluc2VydGVkOlwiLCB1c2VyUmVzcG9uc2UuSXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkl0ZW0gd2FzIG5vdCBmb3VuZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaWduVXBQYXJhbXMgPSB7XG4gICAgICAgICAgICBDbGllbnRJZDogcHJvY2Vzcy5lbnYuQVBQX0NMSUVOVF9JRCxcbiAgICAgICAgICAgIFVzZXJuYW1lOiBkYXRhLmVtYWlsLFxuICAgICAgICAgICAgUGFzc3dvcmQ6IGRhdGEucGFzc3dvcmQsXG4gICAgICAgICAgICBVc2VyQXR0cmlidXRlczogW1xuICAgICAgICAgICAgICAgIHsgTmFtZTogXCJlbWFpbFwiLCBWYWx1ZTogZGF0YS5lbWFpbCB9LFxuICAgICAgICAgICAgICAgIHsgTmFtZTogXCJnaXZlbl9uYW1lXCIsIFZhbHVlOiBkYXRhLmZpcnN0TmFtZSB9LFxuICAgICAgICAgICAgICAgIHsgTmFtZTogXCJmYW1pbHlfbmFtZVwiLCBWYWx1ZTogZGF0YS5sYXN0TmFtZSB9LFxuICAgICAgICAgICAgICAgIHsgTmFtZTogXCJiaXJ0aGRhdGVcIiwgVmFsdWU6IGRhdGEuYmlydGhEYXRlIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBOYW1lOiBcInBob25lX251bWJlclwiLFxuICAgICAgICAgICAgICAgICAgICBWYWx1ZTogZGF0YS5waG9uZU51bWJlcixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfTtcbiAgICAgICAgeWllbGQgKDAsIGNvZ25pdG9fMS5zaWduVXBVc2VyKShzaWduVXBQYXJhbXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogMjAxLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBpZDogZGF0YS5pZCB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAwLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pLFxuICAgICAgICB9O1xuICAgIH1cbn0pO1xuZXhwb3J0cy5oYW5kbGVyID0gaGFuZGxlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNpZ25VcFVzZXIgPSBleHBvcnRzLmNvbmZpcm1Vc2VyID0gZXhwb3J0cy5sb2dpblVzZXIgPSB2b2lkIDA7XG5jb25zdCBhd3Nfc2RrXzEgPSByZXF1aXJlKFwiYXdzLXNka1wiKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL3V0aWxzL2NvbnN0YW50c1wiKTtcbmNvbnN0IGNvZ25pdG8gPSBuZXcgYXdzX3Nka18xLkNvZ25pdG9JZGVudGl0eVNlcnZpY2VQcm92aWRlcih7XG4gICAgcmVnaW9uOiBjb25zdGFudHNfMS5zZWNvbmRhcnlSZWdpb24sXG59KTtcbmNvbnN0IGxvZ2luVXNlciA9IChwYXJhbXMpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHJldHVybiB5aWVsZCBjb2duaXRvLmluaXRpYXRlQXV0aChwYXJhbXMpLnByb21pc2UoKTtcbn0pO1xuZXhwb3J0cy5sb2dpblVzZXIgPSBsb2dpblVzZXI7XG5jb25zdCBjb25maXJtVXNlciA9IChwYXJhbXMpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHJldHVybiB5aWVsZCBjb2duaXRvLmFkbWluQ29uZmlybVNpZ25VcChwYXJhbXMpLnByb21pc2UoKTtcbn0pO1xuZXhwb3J0cy5jb25maXJtVXNlciA9IGNvbmZpcm1Vc2VyO1xuY29uc3Qgc2lnblVwVXNlciA9IChwYXJhbXMpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHJldHVybiB5aWVsZCBjb2duaXRvLnNpZ25VcChwYXJhbXMpLnByb21pc2UoKTtcbn0pO1xuZXhwb3J0cy5zaWduVXBVc2VyID0gc2lnblVwVXNlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFVzZXIgPSBleHBvcnRzLnVwZGF0ZVVzZXIgPSBleHBvcnRzLnBvc3RVc2VyID0gZXhwb3J0cy5keW5hbW9EYiA9IHZvaWQgMDtcbmNvbnN0IGF3c19zZGtfMSA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvY29uc3RhbnRzXCIpO1xuZXhwb3J0cy5keW5hbW9EYiA9IG5ldyBhd3Nfc2RrXzEuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoe1xuICAgIHJlZ2lvbjogY29uc3RhbnRzXzEubWFpblJlZ2lvbixcbn0pO1xuY29uc3QgcG9zdFVzZXIgPSAocGFyYW1zKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICByZXR1cm4geWllbGQgZXhwb3J0cy5keW5hbW9EYi5wdXQocGFyYW1zKS5wcm9taXNlKCk7XG59KTtcbmV4cG9ydHMucG9zdFVzZXIgPSBwb3N0VXNlcjtcbmNvbnN0IHVwZGF0ZVVzZXIgPSAocGFyYW1zKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICByZXR1cm4geWllbGQgZXhwb3J0cy5keW5hbW9EYi51cGRhdGUocGFyYW1zKS5wcm9taXNlKCk7XG59KTtcbmV4cG9ydHMudXBkYXRlVXNlciA9IHVwZGF0ZVVzZXI7XG5jb25zdCBnZXRVc2VyID0gKHBhcmFtcykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgcmV0dXJuIHlpZWxkIGV4cG9ydHMuZHluYW1vRGIuZ2V0KHBhcmFtcykucHJvbWlzZSgpO1xufSk7XG5leHBvcnRzLmdldFVzZXIgPSBnZXRVc2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRvciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzSXNyYWVsaUlkVmFsaWQoaWQpIHtcbiAgICBpZiAodHlwZW9mIGlkICE9PSBcInN0cmluZ1wiKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgdHJpbW1lZCA9IGlkLnRyaW0oKTtcbiAgICBpZiAoIXRyaW1tZWQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIS9eXFxkezl9JC8udGVzdCh0cmltbWVkKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDk7IGkrKykge1xuICAgICAgICBsZXQgbnVtID0gcGFyc2VJbnQodHJpbW1lZFtpXSkgKiAoKGkgJSAyKSArIDEpO1xuICAgICAgICBpZiAobnVtID4gOSlcbiAgICAgICAgICAgIG51bSAtPSA5O1xuICAgICAgICBjb3VudGVyICs9IG51bTtcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50ZXIgJSAxMCA9PT0gMDtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRQaG9uZShwaG9uZSkge1xuICAgIGNvbnN0IHBhdHRlcm4gPSAvXlxcKzk3MjVcXGR7OH0kLztcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KHBob25lKTtcbn1cbmV4cG9ydHMudmFsaWRhdG9yID0ge1xuICAgIHZhbGlkYXRlKGRhdGEpIHtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiBcIkRhdGEgaXMgZW1wdHkuXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRhdGEuZmlyc3ROYW1lIHx8XG4gICAgICAgICAgICB0eXBlb2YgZGF0YS5maXJzdE5hbWUgIT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgICAgIGRhdGEuZmlyc3ROYW1lLmxlbmd0aCA+IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4geyB2YWxpZDogZmFsc2UsIGVycm9yOiBcIkludmFsaWQgZmlyc3QgbmFtZS5cIiB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGF0YS5sYXN0TmFtZSB8fFxuICAgICAgICAgICAgdHlwZW9mIGRhdGEubGFzdE5hbWUgIT09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgICAgIGRhdGEubGFzdE5hbWUubGVuZ3RoID4gMjApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgZXJyb3I6IFwiSW52YWxpZCBsYXN0IG5hbWUuXCIgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRhdGEuaWQgfHwgIWlzSXNyYWVsaUlkVmFsaWQoZGF0YS5pZCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbGlkOiBmYWxzZSwgZXJyb3I6IFwiSW52YWxpZCBJc3JhZWxpIElELlwiIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkYXRhLnBob25lIHx8ICFpc1ZhbGlkUGhvbmUoZGF0YS5waG9uZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBcIkludmFsaWQgcGhvbmUgbnVtYmVyLiBJdCBzaG91bGQgYmUgaW4gdGhlIGZvcm1hdCArOTcyNVhYWFhYWFhYLlwiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRhdGEucGFzc3dvcmQgfHxcbiAgICAgICAgICAgIHR5cGVvZiBkYXRhLnBhc3N3b3JkICE9PSBcInN0cmluZ1wiIHx8XG4gICAgICAgICAgICBkYXRhLnBhc3N3b3JkLmxlbmd0aCA8IDYpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBcIlBhc3N3b3JkIG11c3QgYmUgYSBtaW5pbXVtIG9mIDYgY2hhcmFjdGVycy5cIixcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUgfTtcbiAgICB9LFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50YWJsZU5hbWUgPSBleHBvcnRzLnNlY29uZGFyeVJlZ2lvbiA9IGV4cG9ydHMubWFpblJlZ2lvbiA9IGV4cG9ydHMubW92ZW9MYW1iZGFSb2xlID0gdm9pZCAwO1xuZXhwb3J0cy5tb3Zlb0xhbWJkYVJvbGUgPSBcImFybjphd3M6aWFtOjo3NzkwMDAwNjcxMzA6cm9sZS9Nb3Zlby1MYW1iZGFFeGVjdXRpb25Sb2xlXCI7XG5leHBvcnRzLm1haW5SZWdpb24gPSAnaWwtY2VudHJhbC0xJztcbmV4cG9ydHMuc2Vjb25kYXJ5UmVnaW9uID0gJ2V1LXdlc3QtMSc7XG5leHBvcnRzLnRhYmxlTmFtZSA9ICdpZG9CYXItdXNlcnMnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiYXdzLXNka1wiKTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2MCk7XG4iXSwibmFtZXMiOlsiX19hd2FpdGVyIiwidGhpcyIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJoYW5kbGVyIiwiY29uc3RhbnRzXzEiLCJkeW5hbW9EQl8xIiwiY29nbml0b18xIiwidmFsaWRhdG9yXzEiLCJldmVudCIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJib2R5IiwidmFsaWRhdG9yIiwidmFsaWRhdGUiLCJzdGF0dXNDb2RlIiwic3RyaW5naWZ5IiwibWVzc2FnZSIsInBhcmFtcyIsIlRhYmxlTmFtZSIsInRhYmxlTmFtZSIsIkl0ZW0iLCJpZCIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiYmlydGhEYXRlIiwicGhvbmVfbnVtYmVyIiwicGhvbmVOdW1iZXIiLCJwb3N0VXNlciIsImdldFBhcmFtcyIsIktleSIsInVzZXJSZXNwb25zZSIsImdldFVzZXIiLCJjb25zb2xlIiwibG9nIiwic2lnblVwUGFyYW1zIiwiQ2xpZW50SWQiLCJwcm9jZXNzIiwiZW52IiwiQVBQX0NMSUVOVF9JRCIsIlVzZXJuYW1lIiwiZW1haWwiLCJQYXNzd29yZCIsInBhc3N3b3JkIiwiVXNlckF0dHJpYnV0ZXMiLCJOYW1lIiwiVmFsdWUiLCJzaWduVXBVc2VyIiwiZXJyb3IiLCJjb25maXJtVXNlciIsImxvZ2luVXNlciIsImF3c19zZGtfMSIsImNvZ25pdG8iLCJDb2duaXRvSWRlbnRpdHlTZXJ2aWNlUHJvdmlkZXIiLCJyZWdpb24iLCJzZWNvbmRhcnlSZWdpb24iLCJpbml0aWF0ZUF1dGgiLCJwcm9taXNlIiwiYWRtaW5Db25maXJtU2lnblVwIiwic2lnblVwIiwidXBkYXRlVXNlciIsImR5bmFtb0RiIiwiRHluYW1vREIiLCJEb2N1bWVudENsaWVudCIsIm1haW5SZWdpb24iLCJwdXQiLCJ1cGRhdGUiLCJnZXQiLCJsZW5ndGgiLCJ2YWxpZCIsInRyaW1tZWQiLCJ0cmltIiwidGVzdCIsImNvdW50ZXIiLCJpIiwibnVtIiwicGFyc2VJbnQiLCJpc0lzcmFlbGlJZFZhbGlkIiwicGhvbmUiLCJtb3Zlb0xhbWJkYVJvbGUiLCJtb2R1bGUiLCJyZXF1aXJlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==