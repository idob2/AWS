(()=>{"use strict";var e={460:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{d(o.next(e))}catch(e){r(e)}}function s(e){try{d(o.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.handler=void 0;const i=n(553),r=n(906),a=n(706),s=n(997);t.handler=e=>o(void 0,void 0,void 0,(function*(){try{const t=JSON.parse(e.body||"{}");if(!s.validator.validate(t))return{statusCode:400,body:JSON.stringify({message:"Invalid data"})};const n={TableName:i.tableName,Item:{id:t.id,firstName:t.firstName,lastName:t.lastName,birthDate:t.birthDate,phone_number:t.phoneNumber}};yield(0,r.postUser)(n);const o={TableName:n.TableName,Key:{id:n.Item.id}};yield(0,r.getUser)(o);const d={ClientId:process.env.APP_CLIENT_ID,Username:t.email,Password:t.password,UserAttributes:[{Name:"email",Value:t.email},{Name:"given_name",Value:t.firstName},{Name:"family_name",Value:t.lastName},{Name:"birthdate",Value:t.birthDate},{Name:"phone_number",Value:t.phoneNumber}]};return yield(0,a.signUpUser)(d),{statusCode:201,body:JSON.stringify({id:t.id})}}catch(e){return console.error(e),{statusCode:400,body:JSON.stringify({message:e.message})}}}))},706:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{d(o.next(e))}catch(e){r(e)}}function s(e){try{d(o.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.signUpUser=t.confirmUser=t.loginUser=void 0;const i=n(336),r=n(553),a=new i.CognitoIdentityServiceProvider({region:r.secondaryRegion});t.loginUser=e=>o(void 0,void 0,void 0,(function*(){return yield a.initiateAuth(e).promise()})),t.confirmUser=e=>o(void 0,void 0,void 0,(function*(){yield a.adminConfirmSignUp(e).promise()})),t.signUpUser=e=>o(void 0,void 0,void 0,(function*(){yield a.signUp(e).promise()}))},906:function(e,t,n){var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(i,r){function a(e){try{d(o.next(e))}catch(e){r(e)}}function s(e){try{d(o.throw(e))}catch(e){r(e)}}function d(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}d((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getUser=t.updateUser=t.postUser=t.dynamoDb=void 0;const i=n(336),r=n(553);t.dynamoDb=new i.DynamoDB.DocumentClient({region:r.mainRegion}),t.postUser=e=>o(void 0,void 0,void 0,(function*(){const n=yield t.dynamoDb.put(e).promise();console.log("Post successful:",n)})),t.updateUser=e=>o(void 0,void 0,void 0,(function*(){yield t.dynamoDb.update(e).promise()})),t.getUser=e=>o(void 0,void 0,void 0,(function*(){const n=yield t.dynamoDb.get(e).promise();n.Item?console.log("Item was inserted:",n.Item):console.log("Item was not found")}))},997:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.validator=void 0,t.validator={validate(e){return e?!e.firstName||"string"!=typeof e.firstName||e.firstName.length>20?{valid:!1,error:"Invalid first name."}:!e.lastName||"string"!=typeof e.lastName||e.lastName.length>20?{valid:!1,error:"Invalid last name."}:e.id&&function(e){if("string"!=typeof e)return!1;const t=e.trim();if(!t)return!1;if(!/^\d{9}$/.test(t))return!1;let n=0;for(let e=0;e<9;e++){let o=parseInt(t[e])*(e%2+1);o>9&&(o-=9),n+=o}return n%10==0}(e.id)?e.phone&&(t=e.phone,/^\+9725\d{8}$/.test(t))?!e.password||"string"!=typeof e.password||e.password.length<6?{valid:!1,error:"Password must be a minimum of 6 characters."}:{valid:!0}:{valid:!1,error:"Invalid phone number. It should be in the format +9725XXXXXXXX."}:{valid:!1,error:"Invalid Israeli ID."}:{valid:!1,error:"Data is empty."};var t}}},553:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tableName=t.secondaryRegion=t.mainRegion=t.moveoLambdaRole=void 0,t.moveoLambdaRole="arn:aws:iam::779000067130:role/Moveo-LambdaExecutionRole",t.mainRegion="il-central-1",t.secondaryRegion="eu-west-1",t.tableName="idoBar-users"},336:e=>{e.exports=require("aws-sdk")}},t={},n=function n(o){var i=t[o];if(void 0!==i)return i.exports;var r=t[o]={exports:{}};return e[o].call(r.exports,r,r.exports,n),r.exports}(460),o=exports;for(var i in n)o[i]=n[i];n.__esModule&&Object.defineProperty(o,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,